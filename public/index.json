[
  {
    "content": "Chapter 1 Basics Discover what this Hugo theme is all about and the core-concepts behind it.\n",
    "description": "",
    "tags": null,
    "title": "Basics",
    "uri": "/basics/"
  },
  {
    "content": "This is a plain demo child page.\n",
    "description": "This is a plain page test, and the beginning of a YAML multiline description...\n",
    "tags": null,
    "title": "page X",
    "uri": "/shortcodes/children/test/"
  },
  {
    "content": "Chapter 2 Content Find out how to create and organize your content quickly and intuitively.\n",
    "description": "",
    "tags": null,
    "title": "Content",
    "uri": "/cont/"
  },
  {
    "content": "This document shows you what’s new in the latest release. For a detailed list of changes, see the history page.\nBreaking: A change that requires action by you after upgrading to assure the site is still functional.\nChange: A change in default behavior. This may requires action by you / may or may not be revertable by configuration.\nNew: Marks new behavior you might find interesting or comes configurable.\n 2.8.0   Change: Although never officially documented, this release removes the font Novacento/Novecento from the release. If you use it in an overwritten CSS please replace it with Work Sans. This change was necessary as Novacento did not provide all Latin special characters and lead to mixed styled character text eg. for czech.\n  New: The theme now supports favicons served from static/images/ named as favicon or logo in SVG, PNG or ICO format out of the box. An overridden partial layouts/partials/favicon.html may not be necessary anymore in most cases.\n  New: You can hide the table of contents menu for the whole site by setting the disableToc option in your config.toml. For an example see the example configuration.\n   2.7.0  New: Optional second parameter for notice shortcode to set title in box header.   2.6.0  New: Your site can now be served from a subfolder if you set baseURL and canonifyURLs=true in your config.toml. See the documentation for a detailed example.   2.5.0  Change: Add new colors --MAIN-CODE-color and --MAIN-CODE-BG-color for syntax highlightning fallback in your stylesheet in case guessSyntax=true is set. Ideally they are set to the same values as the ones from your chosen chroma style.   2.4.0   Change: Creation of customized stylesheets was simplified down to only contain the CSS variables. Everything else can and should be deleted from your custom stylesheet to assure everything works fine. For the predefined stylesheet variants, this change is already included. The documentation was adjusted accordingly.\n  New: Hidden pages are displayed by default in their according tags page. You can now turn off this behavior by setting disableTagHiddenPages=true in your config.toml.\n  New: You can define the expansion state of your menus for the whole site by setting the alwaysopen option in your config.toml. Please see further documentation for possible values and default behavior.\n  New: New frontmatter ordersectionsby option to change immediate children sorting in menu and children shortcode. Possible values are title or weight.\n  New: Alternate content of a page is now advertised in the HTML meta tags. See Hugo documentation.\n   2.2.0  New: Hidden pages are displayed by default in the sitemap generated by Hugo and are therefore visible for search engine indexing. You can now turn off this behavior by setting disableSeoHiddenPages=true in your config.toml.   2.1.0   Change: In case the site’s structure contains addional *.md files not part of the site (eg files that are meant to be included by site pages - see CHANGELOG.md in exampleSite), they will now be ignored by the search.\n  New: Hidden pages are indexed for the site search by default. You can now turn off this behavior by setting disableSearchHiddenPages=true in your config.toml.\n  New: If a search term is found in an expand shortcode, the expand will be opened.\n  New: The menu will scroll the active item into view on load.\n   2.0.0   Change: Syntaxhighlightning was switched to built in Hugo mechanism. You may need to configure a new stylesheet or decide to roll you own as describedd on in the Hugo documentation\n  Change: In the predefined stylesheets there was a typo and --MENU-HOME-LINK-HOVERED-color must be changed to --MENU-HOME-LINK-HOVER-color.\n  Change: --MENU-HOME-LINK-color and --MENU-HOME-LINK-HOVER-color were missing in the documentation. You should add them to your custom stylesheets.\n  Change: Arrow navigation and children shortcode were ignoring setting for ordersectionsby. This is now changed and may result in different sorting order of your sub pages.\n  Change: If hidden pages are accessed directly by typing their URL, they will be exposed in the menu.\n  Change: A page without a title will be treated as hidden=true.\n  New: You can define the expansion state of your menus in the frontmatter. Please see further documentation for possible values and default behavior.\n  New: New partials for defining pre/post content for menu items and the content. See documentation for further reading.\n  New: Shortcode children with new parameter containerstyle.\n  New: New shortcode include to include arbitrary file content into a page.\n   1.2.0  New: Shortcode expand with new parameter to open on page load.   1.1.0  New: Mermaid config options can be set in config.toml.  ",
    "description": "",
    "tags": null,
    "title": "What's new",
    "uri": "/basics/migration/"
  },
  {
    "content": "Chapter 3 Shortcodes Hugo uses Markdown for its simple content format. However, there are a lot of things that Markdown doesn’t support well. You could use pure HTML to expand possibilities.\nBut this happens to be a bad idea. Everyone uses Markdown because it’s pure and simple to read even non-rendered. You should avoid HTML to keep it as simple as possible.\nTo avoid this limitations, Hugo created shortcodes. A shortcode is a simple snippet inside a page.\nThe Relearn theme provides multiple shortcodes on top of existing ones.\nAttachments The Attachments shortcode displays a list of files attached to a page\nButton Nice buttons on your page\nChildren List the child pages of a page\nExpand Displays an expandable/collapsible section of text on your page\nInclude Displays content from other Markdown files\nMermaid Generation of diagram and flowchart from text in a similar manner as Markdown\nNotice Disclaimers to help you structure your page\nSite param Get value of site params variables in your page\nTabbed views Synchronize selection of content in different tabbed views\n ",
    "description": "",
    "tags": null,
    "title": "Shortcodes",
    "uri": "/shortcodes/"
  },
  {
    "content": "Chapter 4 This could be yours Start your success story. Now!\n",
    "description": "",
    "tags": null,
    "title": "This could be yours",
    "uri": "/yours/"
  },
  {
    "content": "In Hugo, pages are the core of your site. Once it is configured, pages are definitely the added value to your documentation site.\nFolders Organize your site like any other Hugo project. Typically, you will have a content folder with all your pages.\ncontent ├── level-one │ ├── level-two │ │ ├── level-three │ │ │ ├── level-four │ │ │ │ ├── _index.md \u003c-- /level-one/level-two/level-three/level-four │ │ │ │ ├── page-4-a.md \u003c-- /level-one/level-two/level-three/level-four/page-4-a │ │ │ │ ├── page-4-b.md \u003c-- /level-one/level-two/level-three/level-four/page-4-b │ │ │ │ └── page-4-c.md \u003c-- /level-one/level-two/level-three/level-four/page-4-c │ │ │ ├── _index.md \u003c-- /level-one/level-two/level-three │ │ │ ├── page-3-a.md \u003c-- /level-one/level-two/level-three/page-3-a │ │ │ ├── page-3-b.md \u003c-- /level-one/level-two/level-three/page-3-b │ │ │ └── page-3-c.md \u003c-- /level-one/level-two/level-three/page-3-c │ │ ├── _index.md \u003c-- /level-one/level-two │ │ ├── page-2-a.md \u003c-- /level-one/level-two/page-2-a │ │ ├── page-2-b.md \u003c-- /level-one/level-two/page-2-b │ │ └── page-2-c.md \u003c-- /level-one/level-two/page-2-c │ ├── _index.md \u003c-- /level-one │ ├── page-1-a.md \u003c-- /level-one/page-1-a │ ├── page-1-b.md \u003c-- /level-one/page-1-b │ └── page-1-c.md \u003c-- /level-one/page-1-c ├── _index.md \u003c-- / └── page-top.md \u003c-- /page-top  Note_index.md is required in each folder, it’s your “folder home page”\n Types The Relearn theme defines two types of pages. Default and Chapter. Both can be used at any level of the documentation, the only difference being layout display.\nA Chapter displays a page meant to be used as introduction for a set of child pages. Commonly, it contains a simple title and a catch line to define content that can be found under it. You can define any HTML as prefix for the menu. In the example below, it’s just a number but that could be an icon.\n+++ chapter = true pre = \"\u003cb\u003e1. \u003c/b\u003e\" title = \"Basics\" weight = 5 +++ ### Chapter 1  # Basics  Discover what this Hugo theme is all about and the core-concepts behind it. To tell the Relearn theme to consider a page as a chapter, set chapter=true in the Front Matter of the page.\nA Default page is any other content page.\n+++ title = \"Installation\" weight = 15 +++ The following steps are here to help you initialize your new website. If you don’t know Hugo at all, we strongly suggest you to train by following this great documentation for beginners.\nCreate your project Hugo provides a new command to create a new website.\nhugo new site \u003cnew_project\u003e The Relearn theme provides archetypes to help you create this kind of pages.\nFront Matter configuration Each Hugo page has to define a Front Matter in toml, yaml or json. This site will use toml in all cases.\nThe Relearn theme uses the following parameters on top of Hugo ones :\n+++ # Table of contents (toc) is enabled by default. Set this parameter to true to disable it. # Note: Toc is always disabled for chapter pages disableToc = false # If set, this will be used for the page's menu entry (instead of the `title` attribute) menuTitle = \"\" # If set, this will explicitly override common rules for the expand state of a page's menu entry alwaysopen = true # If set, this will explicitly override common rules for the sorting order of a page's submenu entries ordersectionsby = \"title\" # The title of the page in menu will be prefixed by this HTML content pre = \"\" # The title of the page in menu will be postfixed by this HTML content post = \"\" # Set the page as a chapter, changing the way it's displayed chapter = false # Hide a menu entry by setting this to true hidden = false # Display name of this page modifier. If set, it will be displayed in the footer. LastModifierDisplayName = \"\" # Email of this page modifier. If set with LastModifierDisplayName, it will be displayed in the footer LastModifierEmail = \"\" +++ Add icon to a menu entry In the page frontmatter, add a pre param to insert any HTML code before the menu label. The example below uses the GitHub icon.\n+++ title = \"GitHub repo\" pre = \"\u003ci class='fab fa-github'\u003e\u003c/i\u003e \" +++ Ordering sibling menu/page entries Hugo provides a flexible way to handle order for your pages.\nThe simplest way is to set weight parameter to a number.\n+++ title = \"My page\" weight = 5 +++ Using a custom title for menu entries By default, the Relearn theme will use a page’s title attribute for the menu item (or linkTitle if defined).\nBut a page’s title has to be descriptive on its own while the menu is a hierarchy. We’ve added the menuTitle parameter for that purpose:\nFor example (for a page named content/install/linux.md):\n+++ title = \"Install on Linux\" menuTitle = \"Linux\" +++ Override expand state rules for menu entries You can change how the theme expands menu entries on the side of the content with the alwaysopen setting on a per page basis. If alwaysopen=false for any given entry, its children will not be shown in the menu as long as it is not necessary for the sake of navigation.\nThe theme generates the menu based on the following rules:\n all parent entries of the active page including their siblings are shown regardless of any settings immediate children entries of the active page are shown regardless of any settings if not overridden, all other first level entries behave like they would have been given alwaysopen=false if not overridden, all other entries of levels besides the first behave like they would have been given alwaysopen=true all visible entries show their immediate children entries if alwaysopen=true; this proceeds recursivley all remaining entries are not shown  You can see this feature in action on the example page for children shortcode and its children pages.\nYour Page To configure your page, you basically have three choices:\n Create an _index.md document in content folder and fill the file with Markdown content Create an index.html file in the static folder and fill the file with HTML content Configure your server to automatically redirect home page to one your documentation page  ",
    "description": "",
    "tags": null,
    "title": "Pages organization",
    "uri": "/cont/pages/"
  },
  {
    "content": "Using the command: hugo new [relative new content path], you can start a content file with the date and title automatically set. While this is a welcome feature, active writers need more: archetypes.\nIt is pre-configured skeleton pages with default front matter. Please refer to the documentation for types of page to understand the differences.\nChapter To create a Chapter page, run the following commands\nhugo new --kind chapter \u003cname\u003e/_index.md It will create a page with predefined Front-Matter:\n+++ chapter = true pre = \"\u003cb\u003eX. \u003c/b\u003e\" title = \"{{ replace .Name \"-\" \" \" | title }}\" weight = 5 +++ ### Chapter X # Some Chapter title Lorem Ipsum. Default To create a default page, run either one of the following commands either\nhugo new \u003cchapter\u003e/\u003cname\u003e/_index.md or\nhugo new \u003cchapter\u003e/\u003cname\u003e.md It will create a page with predefined Front-Matter:\n+++ title = \"{{ replace .Name \"-\" \" \" | title }}\" weight = 5 +++ Lorem Ipsum. ",
    "description": "",
    "tags": null,
    "title": "Archetypes",
    "uri": "/cont/archetypes/"
  },
  {
    "content": "This is a demo child page.\nSubpages of this page page 1-1  ",
    "description": "This is a demo child page",
    "tags": [
      "children",
      "non-hidden"
    ],
    "title": "page 1",
    "uri": "/shortcodes/children/children-1/"
  },
  {
    "content": "Thanks to the simplicity of Hugo, this page is as empty as this theme needs requirements.\nJust download latest version of Hugo binary for your OS (Windows, Linux, Mac) : it’s that simple.\n",
    "description": "",
    "tags": null,
    "title": "Requirements",
    "uri": "/basics/requirements/"
  },
  {
    "content": "The following steps are here to help you initialize your new website. If you don’t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners.\nCreate your project Hugo provides a new command to create a new website.\nhugo new site \u003cnew_project\u003e Install the theme Install the Relearn theme by following this documentation\nThis theme’s repository is: https://github.com/McShelby/hugo-theme-relearn.git\nAlternatively, you can download the theme as .zip file and extract it in the themes directory\nBasic configuration When building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default. You can also add the [outputs] section to enable the search functionality.\n# Change the default theme to be use when building the site with Hugo theme = \"hugo-theme-relearn\" # For search functionality [outputs] home = [ \"HTML\", \"RSS\", \"JSON\"] Create your first chapter page Chapters are pages that contain other child pages. It has a special layout style and usually just contains a chapter name, the title and a brief abstract of the section.\n### Chapter 1  # Basics  Discover what this Hugo theme is all about and the core concepts behind it. renders as\nThe Relearn theme provides archetypes to create skeletons for your website. Begin by creating your first chapter page with the following command\nhugo new --kind chapter basics/_index.md By opening the given file, you should see the property chapter=true on top, meaning this page is a chapter.\nBy default all chapters and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata.\nCreate your first content pages Then, create content pages inside the previously created chapter. Here are two ways to create content in the chapter:\nhugo new basics/first-content.md hugo new basics/second-content/_index.md Feel free to edit those files by adding some sample content and replacing the title value in the beginning of the files.\nLaunching the website locally Launch by using the following command:\nhugo serve Go to http://localhost:1313\nYou should notice three things:\n You have a left-side Basics menu, containing two submenus with names equal to the title properties in the previously created files. The home page explains how to customize it by following the instructions. When you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes. Neat!  Build the website When your site is ready to deploy, run the following command:\nhugo A public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server.\nNoteThis website can be automatically published and hosted with Netlify (Read more about Automated HUGO deployments with Netlify). Alternatively, you can use GitHub pages\n ",
    "description": "",
    "tags": null,
    "title": "Installation",
    "uri": "/basics/installation/"
  },
  {
    "content": "Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.\nMarkdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.\nSome of the key benefits are:\n Markdown is simple to learn, with minimal extra characters so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use!  John Gruber, the author of Markdown, puts it like this:\n The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. John Gruber\n Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like:\nInfo Bookmark this page and the official Commonmark reference for easy future reference!\n Headings Headings from h1 through h6 are constructed with a # for each level:\n# h1 Heading ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading Renders to:\nh1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading HTML:\n\u003ch1\u003eh1 Heading\u003c/h1\u003e \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Comments Comments should be HTML compatible\n\u003c!-- This is a comment --\u003e Comment below should NOT be seen:\nHorizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with --- - three consecutive dashes\nrenders to:\n Paragraphs Any text not starting with a special sign is written as normal, plain text and will be wrapped within \u003cp\u003e\u003c/p\u003e tags in the rendered HTML.\nSo this body copy:\nLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. renders to this HTML:\n\u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e Text Markers Bold For emphasizing a snippet of text with a heavier font-weight.\nThe following snippet of text is rendered as bold text.\n**rendered as bold text** renders to:\nrendered as bold text\nand this HTML\n\u003cstrong\u003erendered as bold text\u003c/strong\u003e Italics For emphasizing a snippet of text with italics.\nThe following snippet of text is rendered as italicized text.\n_rendered as italicized text_ renders to:\nrendered as italicized text\nand this HTML:\n\u003cem\u003erendered as italicized text\u003c/em\u003e Strikethrough In GFM (GitHub flavored Markdown) you can do strikethroughs.\n~~Strike through this text.~~ Which renders to:\nStrike through this text.\nHTML:\n\u003cdel\u003eStrike through this text.\u003c/del\u003e Blockquotes For quoting blocks of content from another source within your document.\nAdd \u003e before any text you want to quote.\n\u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. Renders to:\n Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n and this HTML:\n\u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested:\n\u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e \u003e \u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. \u003e \u003e Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus. Renders to:\n Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus.\n Lists Unordered A list of items in which the order of the items does not explicitly matter.\nYou may use any of the following symbols to denote bullets for each list item:\n* valid bullet - valid bullet + valid bullet For example\n+ Lorem ipsum dolor sit amet + Consectetur adipiscing elit + Integer molestie lorem at massa + Facilisis in pretium nisl aliquet + Nulla volutpat aliquam velit - Phasellus iaculis neque - Purus sodales ultricies - Vestibulum laoreet porttitor sem - Ac tristique libero volutpat at + Faucibus porta lacus fringilla vel + Aenean sit amet erat nunc + Eget porttitor lorem Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit  Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at   Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  And this HTML\n\u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e Ordered A list of items in which the order of items does explicitly matter.\n1. Lorem ipsum dolor sit amet 4. Consectetur adipiscing elit 2. Integer molestie lorem at massa 8. Facilisis in pretium nisl aliquet 4. Nulla volutpat aliquam velit 99. Faucibus porta lacus fringilla vel 21. Aenean sit amet erat nunc 6. Eget porttitor lorem Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  And this HTML:\n\u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e  TipIf you just use 1. for each number, Markdown will automatically number each item. For example:\n 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  Code Inline code Wrap inline snippets of code with `.\nIn this example, `\u003cdiv\u003e\u003c/div\u003e` should be wrapped as **code**. Renders to:\nIn this example, \u003cdiv\u003e\u003c/div\u003e should be wrapped as code.\nHTML:\n\u003cp\u003eIn this example, \u003ccode\u003e\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u003c/code\u003e should be wrapped as \u003cstrong\u003ecode\u003c/strong\u003e.\u003c/p\u003e Indented code Or indent several lines of code by at least two spaces, as in:\n// Some comments line 1 of code line 2 of code line 3 of code Renders to:\n// Some comments line 1 of code line 2 of code line 3 of code  HTML:\n\u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e Block code “fences” Use “fences” ``` to block in multiple lines of code.\n``` Sample text here... ``` HTML:\n\u003cpre\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e Syntax highlighting GFM, or “GitHub Flavored Markdown” also supports syntax highlighting. To activate it, usually you simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML.\nSee Code Highlighting for additional documentation.\nFor example, to apply syntax highlighting to JavaScript code:\n```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` Renders to:\ngrunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\n| Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | Renders to:\n   Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    And this HTML:\n\u003ctable\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e Right aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column.\n| Option | Description | | ------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. |    Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    Two tables adjacent    Option Description     ext extension to be used for dest files.       Option Description     ext extension to be used for dest files.    Links Basic link [Assemble](http://assemble.io) Renders to (hover over the link, there is no tooltip):\nAssemble\nHTML:\n\u003ca href=\"http://assemble.io\"\u003eAssemble\u003c/a\u003e Add a tooltip [Upstage](https://github.com/upstage/ \"Visit Upstage!\") Renders to (hover over the link, there should be a tooltip):\nUpstage\nHTML:\n\u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters:\n# Table of Contents  * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections:\n## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. NOTE that specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works.\nImages Images have a similar syntax to links but include a preceding exclamation point.\n![Minion](https://octodex.github.com/images/minion.png) or\n![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") Like links, Images also have a footnote style syntax\nAlternative usage : note images ![Alt text][id] With a reference later in the document defining the URL location:\n[id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\"  Further image formatting The Hugo Markdown parser supports additional non-standard functionality.\nResizing image Add HTTP parameters width and/or height to the link image to resize the image. Values are CSS values (default is auto).\n![Minion](https://octodex.github.com/images/minion.png?width=20pc) ![Minion](https://octodex.github.com/images/minion.png?height=50px) ![Minion](https://octodex.github.com/images/minion.png?height=50px\u0026width=300px) Add CSS classes Add a HTTP classes parameter to the link image to add CSS classes. shadowand border are available but you could define other ones.\n![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=shadow) ![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=border) ![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=border,shadow) Lightbox Add a HTTP featherlight parameter to the link image to disable lightbox. By default lightbox is enabled using the featherlight.js plugin. You can disable this by defining featherlight to false.\n![Minion](https://octodex.github.com/images/minion.png?featherlight=false) ",
    "description": "",
    "tags": null,
    "title": "Markdown syntax",
    "uri": "/cont/markdown/"
  },
  {
    "content": "The Relearn theme uses Hugo’s built-in syntax highlighting for code.\nMarkdown syntax Wrap the code block with three backticks and the name of the language. Highlight will try to auto detect the language if one is not provided.\n```json [ { \"title\": \"apples\", \"count\": [12000, 20000], \"description\": {\"text\": \"...\", \"sensitive\": false} }, { \"title\": \"oranges\", \"count\": [17500, null], \"description\": {\"text\": \"...\", \"sensitive\": false} } ] ``` Renders to:\n[ { \"title\": \"apples\", \"count\": [12000, 20000], \"description\": {\"text\": \"...\", \"sensitive\": false} }, { \"title\": \"oranges\", \"count\": [17500, null], \"description\": {\"text\": \"...\", \"sensitive\": false} } ] Supported languages Hugo comes with a remarkable list of supported languages.\nRecommended configuration You can choose a color theme from the list of supported themes and add it in your config.toml\n[markup] [markup.highlight] style = \"base16-snazzy\" # choose a color theme or create your own guessSyntax = false # if set to true, avoid unstyled code if no language was given but mermaid code fences will not work anymore ",
    "description": "",
    "tags": null,
    "title": "Code highlighting",
    "uri": "/cont/syntaxhighlight/"
  },
  {
    "content": "Global site parameters On top of Hugo global configuration, the Relearn theme lets you define the following parameters in your config.toml (here, values are default).\nNote that some of these parameters are explained in details in other sections of this documentation.\n[params] # This controls whether submenus will be expanded (true), or collapsed (false) in the # menu; if no setting is given, the first menu level is set to false, all others to true; # this can be overridden in the pages frontmatter alwaysopen = true # Prefix URL to edit current page. Will display an \"Edit this page\" button on top right hand corner of every page. # Useful to give opportunity to people to create merge request for your doc. # See the config.toml file from this documentation site to have an example. editURL = \"\" # Author of the site, will be used in meta information author = \"\" # Description of the site, will be used in meta information description = \"\" # Shows a checkmark for visited pages on the menu showVisitedLinks = false # Disable search function. It will hide search bar disableSearch = false # Disable search in hidden pages, otherwise they will be shown in search box disableSearchHiddenPages = false # Disables hidden pages from showing up in the sitemap and on Google (et all), otherwise they may be indexed by search engines disableSeoHiddenPages = false # Disables hidden pages from showing up on the tags page although the tag term will be displayed even if all pages are hidden disableTagHiddenPages = false # Javascript and CSS cache are automatically busted when new version of site is generated. # Set this to true to disable this behavior (some proxies don't handle well this optimization) disableAssetsBusting = false # Set this to true to disable copy-to-clipboard button for inline code. disableInlineCopyToClipBoard = false # A title for shortcuts in menu is set by default. Set this to true to disable it. disableShortcutsTitle = false # If set to false, a Home button will appear below the search bar on the menu. # It is redirecting to the landing page of the current language if specified. (Default is \"/\") disableLandingPageButton = true # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = false # Hide breadcrumbs in the header and only show the current page title disableBreadcrumb = true # If set to true, hide table of contents menu in the header of all pages disableToc = false # If set to true, prevents Hugo from including the Mermaid module if not needed (will reduce load times and traffic) disableMermaid = false # Specifies the remote location of the Mermaid js customMermaidURL = \"https://unpkg.com/mermaid@8.8.0/dist/mermaid.min.js\" # Initialization parameter for Mermaid, see Mermaid documentation mermaidInitialize = \"{ \\\"theme\\\": \\\"default\\\" }\" # Hide Next and Previous page buttons normally displayed full height beside content disableNextPrev = true # Order sections in menu by \"weight\" or \"title\". Default to \"weight\"; # this can be overridden in the pages frontmatter ordersectionsby = \"weight\" # Change default color scheme with a variant one. Can be \"red\", \"blue\", \"green\". themeVariant = \"\" # Provide a list of custom css files to load relative from the `static/` folder in the site root. custom_css = [\"css/foo.css\", \"css/bar.css\"] # Change the title separator. Default to \"::\". titleSeparator = \"-\" A word on running your site in a subfolder The theme runs best if your site is installed in the root of your webserver. If your site is served from a subfolder, eg. https://example.com/mysite/, you have to set the following lines to your config.toml\nbaseURL = \"https://example.com/mysite/\" canonifyURLs = true Without canonifyURLs=true URLs in sublemental pages (like sitemap.xml, rss.xml) will be generated falsly while your HTML files will still work. See https://github.com/gohugoio/hugo/issues/5226.\nActivate search If not already present, add the follow lines in the same config.toml file.\n[outputs] home = [ \"HTML\", \"RSS\", \"JSON\"] Relearn theme uses the last improvement available in hugo version 20+ to generate a json index file ready to be consumed by lunr.js javascript search engine.\n Hugo generate lunrjs index.json at the root of public folder. When you build the site with hugo server, hugo generates it internally and of course it doesn’t show up in the filesystem\n Mermaid The Mermaid configuration parameters can also be set on a specific page. In this case, the global parameter would be overwritten by the local one. See Mermaid for additional documentation.\n Example:\nMermaid is globally disabled. By default it won’t be loaded by any page. On page “Architecture” you need a class diagram. You can set the Mermaid parameters locally to only load mermaid on this page (not on the others).\n You also can disable Mermaid for specific pages while globally enabled.\nHome Button Configuration If the disableLandingPageButton option is set to false, a Home button will appear on the left menu. It is an alternative for clicking on the logo. To edit the appearance, you will have to configure two parameters for the defined languages:\n[Lanugages] [Lanugages.en] ... landingPageURL = \"/\" landingPageName = \"\u003ci class='fas fa-home'\u003e\u003c/i\u003e Home\" ... [Lanugages.pir] ... landingPageURL = \"/pir/\" landingPageName = \"\u003ci class='fas fa-home'\u003e\u003c/i\u003e Arrr! Homme\" ... If those params are not configured for a specific language, they will get their default values:\nlandingPageURL = \"/\" landingPageName = \"\u003ci class='fas fa-home'\u003e\u003c/i\u003e Home\" The home button is going to look like this:\n",
    "description": "",
    "tags": null,
    "title": "Configuration",
    "uri": "/basics/configuration/"
  },
  {
    "content": "This is a demo child page with no description.\nSo its content is used as description.\n",
    "description": "",
    "tags": [
      "children",
      "non-hidden"
    ],
    "title": "page 2",
    "uri": "/shortcodes/children/children-2/"
  },
  {
    "content": "The Relearn theme has been built to be as configurable as possible by defining multiple partials\nIn themes/hugo-theme-relearn/layouts/partials/, you will find all the partials defined for this theme. If you need to overwrite something, don’t change the code directly. Instead follow this page. You’d create a new partial in the layouts/partials folder of your local project. This partial will have the priority.\nThis theme defines the following partials :\n content: the content page itself. This can be overridden if you wan’t to display page’s meta data above or below the content. header: the header of the content page (contains the breadcrumbs). Not meant to be overwritten custom-header: custom headers in page. Meant to be overwritten when adding CSS imports. Don’t forget to include style HTML tag directive in your file footer: the footer of the content page (contains the arrows). Not meant to be overwritten custom-footer: custom footer in page. Meant to be overwritten when adding Javacript. Don’t forget to include javascript HTML tag directive in your file favicon: the favicon logo: the logo, on top left hand corner. meta: HTML meta tags, if you want to change default behavior menu: left menu. Not meant to be overwritten menu-pre: side-wide configuration to prepend to menu items. If you override this, it is your responsiblity to take the page’s pre setting into account. menu-post: side-wide configuration to append to menu items. If you override this, it is your responsiblity to take the page’s post setting into account. menu-footer: footer of the the left menu search: search box toc: table of contents  Change the logo Create a new file in layouts/partials/ named logo.html. Then write any HTML you want. You could use an img HTML tag and reference an image created under the static folder, or you could paste a SVG definition!\nNoteThe size of the logo will adapt automatically\n Change the favicon If your favicon is a SVG, PNG or ICO, just drop off your image in your local static/images/ folder and name it favicon.svg, favicon.png or favicon.ico respectivly.\nIf no favicon file is found, the theme will lookup the alternative filename logo in the same location and will repeat the search for the list of supported file types.\nIf you need to change this default behavior, create a new file in layouts/partials/ named favicon.html. Then write something like this:\n\u003clink rel=\"icon\" href=\"/images/favicon.bmp\" type=\"image/bmp\" /\u003e Change default colors The Relearn theme let you choose between some predefined color scheme variants, but feel free to add one yourself!\nStandard variant [params] # Change default color scheme with a variant one. Can be empty, \"red\", \"blue\", \"green\". themeVariant = \"\" Red variant [params] # Change default color scheme with a variant one. Can be empty, \"red\", \"blue\", \"green\". themeVariant = \"red\" Blue variant [params] # Change default color scheme with a variant one. Can be empty, \"red\", \"blue\", \"green\". themeVariant = \"blue\" Green variant [params] # Change default color scheme with a variant one. Can be empty, \"red\", \"blue\", \"green\". themeVariant = \"green\" ‘Mine‘ variant First, create a new CSS file in your local static/css folder prefixed by theme (e.g. with mine theme static/css/theme-mine.css). Copy the following content and modify colors in CSS variables.\n:root { --MAIN-TEXT-color: #323232; /* Color of text by default */ --MAIN-TITLES-TEXT-color: #5e5e5e; /* Color of titles h2-h3-h4-h5-h6 */ --MAIN-LINK-color: #1C90F3; /* Color of links */ --MAIN-LINK-HOVER-color: #167ad0; /* Color of hovered links */ --MAIN-ANCHOR-color: #1C90F3; /* color of anchors on titles */ --MAIN-CODE-color: #e2e4e5; /* fallback color for code background */ --MAIN-CODE-BG-color: #282a36; /* fallback color for code text */ --MENU-HOME-LINK-color: #323232; /* Color of the home button text */ --MENU-HOME-LINK-HOVER-color: #5e5e5e; /* Color of the hovered home button text */ --MENU-HEADER-BG-color: #1C90F3; /* Background color of menu header */ --MENU-HEADER-BORDER-color: #33a1ff; /*Color of menu header border */ --MENU-SEARCH-BG-color: #167ad0; /* Search field background color (by default borders + icons) */ --MENU-SEARCH-BOX-color: #33a1ff; /* Override search field border color */ --MENU-SEARCH-BOX-ICONS-color: #a1d2fd; /* Override search field icons color */ --MENU-SECTIONS-ACTIVE-BG-color: #20272b; /* Background color of the active section and its children */ --MENU-SECTIONS-BG-color: #252c31; /* Background color of other sections */ --MENU-SECTIONS-LINK-color: #ccc; /* Color of links in menu */ --MENU-SECTIONS-LINK-HOVER-color: #e6e6e6; /* Color of links in menu, when hovered */ --MENU-SECTION-ACTIVE-CATEGORY-color: #777; /* Color of active category text */ --MENU-SECTION-ACTIVE-CATEGORY-BG-color: #fff; /* Color of background for the active category (only) */ --MENU-VISITED-color: #33a1ff; /* Color of 'page visited' icons in menu */ --MENU-SECTION-HR-color: #20272b; /* Color of \u003chr\u003e separator in menu */ } Then, set the themeVariant value with the name of your custom theme file. That’s it!\n[params] # Change default color scheme with a variant one. Can be \"red\", \"blue\", \"green\". themeVariant = \"mine\" ",
    "description": "",
    "tags": null,
    "title": "Customization",
    "uri": "/basics/customization/"
  },
  {
    "content": "You can define additional menu entries or shortcuts in the navigation menu without any link to content.\nBasic configuration Edit the website configuration config.toml and add a [[menu.shortcuts]] entry for each link your want to add.\nExample from the current website:\n[[menu.shortcuts]] name = \"\u003ci class='fab fa-fw fa-github'\u003e\u003c/i\u003e GitHub repo\" identifier = \"ds\" url = \"https://github.com/McShelby/hugo-theme-relearn\" weight = 10 [[menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-camera'\u003e\u003c/i\u003e Showcases\" url = \"/showcase/\" weight = 11 [[menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-bookmark'\u003e\u003c/i\u003e Hugo Documentation\" identifier = \"hugodoc\" url = \"https://gohugo.io/\" weight = 20 [[menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-bullhorn'\u003e\u003c/i\u003e Credits\" url = \"/credits/\" weight = 30 [[menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-tags'\u003e\u003c/i\u003e Tags\" url = \"/tags/\" weight = 40 By default, shortcuts are preceded by a title. This title can be disabled by setting disableShortcutsTitle=true. However, if you want to keep the title but change its value, it can be overriden by changing your local i18n translation string configuration.\nFor example, in your local i18n/en.toml file, add the following content\n[Shortcuts-Title] other = \"\u003cYour value\u003e\" Read more about hugo menu and hugo i18n translation strings\nConfiguration for Multilingual mode When using a multilingual website, you can set different menus for each language. In the config.toml file, prefix your menu configuration by Languages.\u003clanguage-id\u003e.\nExample from the current website:\n[Languages] [Languages.en] title = \"Documentation for Hugo Relearn Theme\" weight = 1 languageName = \"English\" landingPageURL = \"/\" landingPageName = \"\u003ci class='fas fa-home'\u003e\u003c/i\u003e Home\" [[Languages.en.menu.shortcuts]] name = \"\u003ci class='fab fa-fw fa-github'\u003e\u003c/i\u003e GitHub repo\" identifier = \"ds\" url = \"https://github.com/McShelby/hugo-theme-relearn\" weight = 10 [[Languages.en.menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-camera'\u003e\u003c/i\u003e Showcases\" url = \"/showcase/\" weight = 11 [[Languages.en.menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-bookmark'\u003e\u003c/i\u003e Hugo Documentation\" identifier = \"hugodoc\" url = \"https://gohugo.io/\" weight = 20 [[Languages.en.menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-bullhorn'\u003e\u003c/i\u003e Credits\" url = \"/credits/\" weight = 30 [[Languages.en.menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-tags'\u003e\u003c/i\u003e Tags\" url = \"/tags/\" weight = 40 [Languages.pir] title = \"Documentat'n fer Cap'n Hugo Relearrrn Theme\" weight = 1 languageName = \"Arrr! Pirrrates\" landingPageURL = \"/pir/\" landingPageName = \"\u003ci class='fas fa-home'\u003e\u003c/i\u003e Arrr! Home\" [[Languages.pir.menu.shortcuts]] name = \"\u003ci class='fab fa-fw fa-github'\u003e\u003c/i\u003e GitHub repo\" identifier = \"ds\" url = \"https://github.com/McShelby/hugo-theme-relearn\" weight = 10 [[Languages.pir.menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-camera'\u003e\u003c/i\u003e Showcases\" url = \"/showcase/\" weight = 11 [[Languages.pir.menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-bookmark'\u003e\u003c/i\u003e Cap'n Hugo Documentat'n\" identifier = \"hugodoc\" url = \"https://gohugo.io/\" weight = 20 [[Languages.pir.menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-bullhorn'\u003e\u003c/i\u003e Crrredits\" url = \"/credits/\" weight = 30 [[Languages.pir.menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-tags'\u003e\u003c/i\u003e Arrr! Tags\" url = \"/tags/\" weight = 40 Read more about hugo menu and hugo multilingual menus\n",
    "description": "",
    "tags": null,
    "title": "Menu extra shortcuts",
    "uri": "/cont/menushortcuts/"
  },
  {
    "content": "The Relearn theme for Hugo loads the Font Awesome library, allowing you to easily display any icon or logo available in the Font Awesome free collection.\nFinding an icon Browse through the available icons in the Font Awesome Gallery. Notice that the free filter is enabled, as only the free icons are available by default.\nOnce on the Font Awesome page for a specific icon, for example the page for the heart, copy the HTML reference and paste into the Markdown content.\nThe HTML to include the heart icon is:\n\u003ci class=\"fas fa-heart\"\u003e\u003c/i\u003e Including in markdown Paste the \u003ci\u003e HTML into markup and Font Awesome will load the relevant icon.\nBuilt with \u003ci class=\"fas fa-heart\"\u003e\u003c/i\u003e by Relearn and Hugo Which appears as\nBuilt with  by Relearn and Hugo\nCustomising icons Font Awesome provides many ways to modify the icon\n Change colour (by default the icon will inherit the parent colour) Increase or decrease size Rotate Combine with other icons  Check the full documentation on web fonts with CSS for more.\n",
    "description": "",
    "tags": null,
    "title": "Icons and logos",
    "uri": "/cont/icons/"
  },
  {
    "content": "Changelog 2.8.2 (2021-11-08) Fixes  [bug] mermaid: always load javascript to avoid break if code fences are used #142   2.8.1 (2021-11-04) Fixes  [bug] search: don’t break JS in multilang setup if search is disabled #140   2.8.0 (2021-11-03) Enhancements  [feature] toc: make disableTOC globally available via config.toml #133 [feature] mermaid: only load javascript if necessary #95 [feature] theme: switch font #83 [feature] theme: make favicon configurable #2  Fixes  [bug] mermaid: assert that window.mermaid is actually mermaid #136 [bug] menu: remove usage of Hugos UniqueID #131 [bug] theme: reduce margin for children shortcode #130 [bug] theme: left-align h3 in chapters #129 [bug] theme: align copy link to clipboard #128   2.7.0 (2021-10-24) Enhancements  [feature] notice: support ccustom titles #124   2.6.0 (2021-10-21) Fixes  [bug] theme: generate correct links if theme served from subdirectory #120   2.5.1 (2021-10-12) Fixes  [bug] security: fix XSS for malicioius image URLs #117   2.5.0 (2021-10-08) Enhancements  [feature] syntax highlight: provide default colors for unknown languages #113  Fixes  [bug] security: fix XSS for malicioius URLs #114 [bug] menu: write correct local shortcut links #112   2.4.1 (2021-10-07) Fixes  [bug] theme: remove runtime styles from print #111   2.4.0 (2021-10-07) Enhancements  [feature] lang: add vietnamese translation #109 [feature] theme: simplify stylesheet for color variants #107 [feature] hidden pages: remove from RSS feed, JSON, taxonomy etc #102 [feature] theme: announce alternative content in header #101 [feature] menu: frontmatter option to change sort predicate #98 [feature] menu: add default setting for menu expansion #97 [feature] theme: improve print style #93 [feature] theme: improve style #92  Fixes  [bug] include: don’t generate additional HTML if file should be displayed “as is” #110 [bug] attachments: fix broken links if multilang config is used #105 [bug] theme: fix sticky header to remove horizontal scrollbar #82  Maintenance  [task] chore: update fontawesome #94   2.3.2 (2021-09-20) Fixes  [bug] docs: rename history pirate translation #91   2.3.1 (2021-09-20) Fixes  [bug] docs: rename english pirate translation to avoid crash on rendering #90   2.3.0 (2021-09-13) Fixes  [bug] theme: fix usage of section element #88  Maintenance  [task] theme: ensure IE11 compatiblity #89 [task] docs: Arrr! showcase multilang featurrre #87   2.2.0 (2021-09-09) Enhancements  [feature] sitemap: hide hidden pages from sitemap and SEO indexing #85  Fixes  [bug] theme: fix showVisitedLinks in case Hugo is configured to modify relative URLs #86  Maintenance  [task] theme: switch from data-vocabulary to schema #84   2.1.0 (2021-09-07) Enhancements  [feature] search: open expand if it contains search term #80 [feature] menu: scroll active item into view #79 [feature] search: disable search in hidden pages #76 [feature] search: improve readablility of index.json #75 [feature] search: increase performance #74 [feature] search: improve search context preview #73  Fixes  [bug] search: hide non-site content #81 [bug] menu: always hide hidden sub pages #77   2.0.0 (2021-08-28) Enhancements  [feature] tabs: enhance styling #65 [feature] theme: improve readability #64 [feature] menu: show hidden pages if accessed directly #60 [feature] theme: treat pages without title as hidden #59 [feature] search: show search results if field gains focus #58 [feature] theme: add partial templates for pre/post menu entries #56 [feature] theme: make chapter archetype more readable #55 [feature] children: add parameter for container style #53 [feature] theme: make content a template #50 [feature] menu: control menu expansion with alwaysopen parameter #49 [feature] include: new shortcode to include other files #43 [feature] theme: adjust print styles #35 [feature] code highligher: switch to standard hugo highlighter #32  Fixes  [bug] arrow-nav: default sorting ignores ordersectionsby #63 [bug] children: default sorting ignores ordersectionsby #62 [bug] arrow-nav: fix broken links on (and below) hidden pages #61 [bug] theme: remove superflous singular taxonomy from taxonomy title #46 [bug] theme: missing –MENU-HOME-LINK-HOVER-color in documentation #45 [bug] theme: fix home link when base URL has some path #44  Maintenance  [task] docs: include changelog in exampleSite #33   1.2.0 (2021-07-26) Enhancements  [feature] theme: adjust copy-to-clipboard #29 [feature] attachments: adjust style between notice boxes and attachments #28 [feature] theme: adjust blockquote contrast #27 [feature] expand: add option to open on page load #25 [feature] expand: rework styling #24 [feature] attachments: sort output #23 [feature] notice: make restyling of notice boxes more robust #20 [feature] notice: fix contrast issues #19 [feature] notice: align box colors to common standards #18 [feature] notice: use distinct icons for notice box type #17  Fixes  [bug] attachments: support i18n for attachment size #21 [bug] notice: support i18n for box labels #16 [bug] notice: support multiple blocks in one box #15  Maintenance  [task] dependency: upgrade jquery to 3.6.0 #30   1.1.1 (2021-07-04) Maintenance  [task] theme: prepare for new hugo theme registration #13   1.1.0 (2021-07-02) Enhancements  [feature] mermaid: expose options in config.toml #4  Fixes  [bug] mermaid: config option for CDN url not used #12 [bug] mermaid: only highlight text in HTML elements #10 [bug] mermaid: support pan \u0026 zoom for graphs #9 [bug] mermaid: code fences not always rendered #6 [bug] mermaid: search term on load may bomb chart #5  Maintenance  [task] mermaid: update to 8.10.2 #7   1.0.1 (2021-07-01) Maintenance  [task] Prepare for hugo showcase #3   1.0.0 (2021-07-01) Maintenance  [task] Fork project #1   ",
    "description": "",
    "tags": null,
    "title": "History",
    "uri": "/basics/history/"
  },
  {
    "content": "The Relearn theme is fully compatible with Hugo multilingual mode.\nIt provides:\n Translation strings for default values (English, Arabic, Dutch, Piratized English, German, Hindi, Indonesian, Japanese, Piratized English, Portuguese, Russian, Simplified Chinese, Spanish, Turkish). Feel free to contribute! Automatic menu generation from multilingual content In-browser language switching  Basic configuration After learning how Hugo handle multilingual websites, define your languages in your config.toml file.\nFor example with current English and Piratized English website.\n# English is the default language defaultContentLanguage = \"en\" [Languages] [Languages.en] title = \"Documentation for Hugo Relearn Theme\" weight = 1 languageName = \"English\" [Languages.pir] title = \"Documentat'n fer Cap'n Hugo Relearrrn Theme\" weight = 2 languageName = \"Arrr! Pirrrates\" Then, for each new page, append the id of the language to the file.\n Single file my-page.md is split in two files:  in English: my-page.md in Piratized English: my-page.pir.md   Single file _index.md is split in two files:  in English: _index.md in Piratized English: _index.pir.md    InfoBe aware that only translated pages are displayed in menu. It’s not replaced with default language content.\n TipUse slug Front Matter parameter to translate urls too.\n Overwrite translation strings Translations strings are used for common default values used in the theme (Edit this page button, Search placeholder and so on). Translations are available in English and Piratized English but you may use another language or want to override default values.\nTo override these values, create a new file in your local i18n folder i18n/\u003cidlanguage\u003e.toml and inspire yourself from the theme themes/hugo-theme-relearn/i18n/en.toml\nDisable language switching Switching the language in the browser is a great feature, but for some reasons you may want to disable it.\nJust set disableLanguageSwitchingButton=true in your config.toml\n[params] # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = true ",
    "description": "",
    "tags": null,
    "title": "Multilingual and i18n",
    "uri": "/cont/i18n/"
  },
  {
    "content": "This is a demo child page.\nSubpages of this page page 3-1  ",
    "description": "This is a demo child page",
    "tags": [
      "children",
      "non-hidden"
    ],
    "title": "page 3",
    "uri": "/shortcodes/children/children-3/"
  },
  {
    "content": "This is a hidden demo child page. This page and all its children are hidden in the menu, arrow navigation and children shortcode as long as you aren’t viewing this page or its children directly.\n",
    "description": "This is a hidden demo child page",
    "tags": [
      "children",
      "hidden"
    ],
    "title": "page 4 (hidden)",
    "uri": "/shortcodes/children/children-4/"
  },
  {
    "content": "The Relearn theme supports one default taxonomy of Hugo: the tag feature.\nConfiguration Just add tags to any page:\n+++ tags = [\"tutorial\", \"theme\"] title = \"Theme tutorial\" weight = 15 +++ Behavior The tags are displayed at the top of the page, in their insertion order.\nEach tag is a link to a Taxonomy page displaying all the articles with the given tag.\nList all the tags In the config.toml file you can add a shortcut to display all the tags\n[[menu.shortcuts]] name = \"\u003ci class='fas fa-tags'\u003e\u003c/i\u003e Tags\" url = \"/tags\" weight = 30 ",
    "description": "",
    "tags": [
      "documentation",
      "tutorial"
    ],
    "title": "Tags",
    "uri": "/cont/tags/"
  },
  {
    "content": "The Attachments shortcode displays a list of files attached to a page.\nAttachments adivorciarsetoca00cape.pdf (361 KB) BachGavotteShort.mp3 (357 KB) Carroll_AliceAuPaysDesMerveilles.pdf (175 KB) hugo.png (17 KB) hugo.txt (20 B) movieselectricsheep-flock-244-32500-2.mp4 (340 KB)   Usage The shortcurt lists files found in a specific folder. Currently, it support two implementations for pages\n  If your page is a Markdown file, attachements must be placed in a folder named like your page and ending with .files.\n  content  _index.md page.files  attachment.pdf   page.md       If your page is a folder, attachements must be placed in a nested ‘files’ folder.\n  content  _index.md page  index.md files  attachment.pdf           Be aware that if you use a multilingual website, you will need to have as many folders as languages.\nThat’s all!\nParameters    Parameter Default Description     title “Attachments” List’s title   sort “asc” Sorting the output in ascending or descending order   style \"\" Choose between orange, grey, blue and green for nice style   pattern “.*” A regular expressions, used to filter the attachments by file name. The pattern parameter value must be regular expressions.    For example:\n To match a file suffix of ‘jpg’, use *.jpg (not *.jpg). To match file names ending in ‘jpg’ or ‘png’, use .*(jpg|png)  Examples List of attachments ending in pdf or mp4 {{%attachments title=\"Related files\" pattern=\".*(pdf|mp4)\"/%}} renders as\nRelated files adivorciarsetoca00cape.pdf (361 KB) Carroll_AliceAuPaysDesMerveilles.pdf (175 KB) movieselectricsheep-flock-244-32500-2.mp4 (340 KB)   Colored styled box {{%attachments style=\"orange\" /%}} renders as\nAttachments adivorciarsetoca00cape.pdf (361 KB) BachGavotteShort.mp3 (357 KB) Carroll_AliceAuPaysDesMerveilles.pdf (175 KB) hugo.png (17 KB) hugo.txt (20 B) movieselectricsheep-flock-244-32500-2.mp4 (340 KB)   {{%attachments style=\"grey\" /%}} renders as\nAttachments adivorciarsetoca00cape.pdf (361 KB) BachGavotteShort.mp3 (357 KB) Carroll_AliceAuPaysDesMerveilles.pdf (175 KB) hugo.png (17 KB) hugo.txt (20 B) movieselectricsheep-flock-244-32500-2.mp4 (340 KB)   {{%attachments style=\"blue\" /%}} renders as\nAttachments adivorciarsetoca00cape.pdf (361 KB) BachGavotteShort.mp3 (357 KB) Carroll_AliceAuPaysDesMerveilles.pdf (175 KB) hugo.png (17 KB) hugo.txt (20 B) movieselectricsheep-flock-244-32500-2.mp4 (340 KB)   {{%attachments style=\"green\" /%}} renders as\nAttachments adivorciarsetoca00cape.pdf (361 KB) BachGavotteShort.mp3 (357 KB) Carroll_AliceAuPaysDesMerveilles.pdf (175 KB) hugo.png (17 KB) hugo.txt (20 B) movieselectricsheep-flock-244-32500-2.mp4 (340 KB)   ",
    "description": "The Attachments shortcode displays a list of files attached to a page",
    "tags": null,
    "title": "Attachments",
    "uri": "/shortcodes/attachments/"
  },
  {
    "content": "A button is a just a clickable button with optional icon.\n{{% button href=\"https://gohugo.io/\" %}}Get Hugo{{% /button %}} {{% button href=\"https://gohugo.io/\" icon=\"fas fa-download\" %}}Get Hugo with icon{{% /button %}} {{% button href=\"https://gohugo.io/\" icon=\"fas fa-download\" icon-position=\"right\" %}}Get Hugo with icon right{{% /button %}}  Get Hugo   Get Hugo with icon  Get Hugo with icon right   ",
    "description": "Nice buttons on your page",
    "tags": null,
    "title": "Button",
    "uri": "/shortcodes/button/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/"
  },
  {
    "content": "Use the children shortcode to list the child pages of a page and the further descendants (children’s children). By default, the shortcode displays links to the child pages.\nUsage    Parameter Default Description     page current Specify the page name (section name) to display children for   containerstyle “ul” Choose the style used to group all children. It could be any HTML tag name   style “li” Choose the style used to display each descendant. It could be any HTML tag name   showhidden “false” When true, child pages hidden from the menu will be displayed   description “false” Allows you to include a short text under each page in the list. When no description exists for the page, children shortcode takes the first 70 words of your content. Read more info about summaries on gohugo.io   depth 1 Enter a number to specify the depth of descendants to display. For example, if the value is 2, the shortcode will display 2 levels of child pages. Tips: set 999 to get all descendants   sort ordersectionsby Sort children by weight, to sort on menu order - title, to sort alphabetically on menu label. If not set it is sorted by the ordersectionsby setting of the site and the pages frontmatter    Demo {{% children %}}  page X page 1 page 2 page 3  {{% children description=\"true\" %}}  page X This is a plain page test, and the beginning of a YAML multiline description... page 1 This is a demo child page\npage 2 This is a demo child page with no description. So its content is used as description.\npage 3 This is a demo child page\n {{% children depth=\"999\" showhidden=\"true\" %}}  page X page 1 page 1-1 page 1-1-1 (hidden) page 1-1-1-1 page 1-1-1-1-1 (hidden) page 1-1-1-1-1-1 page 1-1-2 page 1-1-2-1 page 1-1-2-2 page 1-1-3 page 2 page 3 page 3-1 page 4 (hidden)  {{% children containerstyle=\"div\" style=\"h2\" depth=\"3\" description=\"true\" %}}  page X This is a plain page test, and the beginning of a YAML multiline description... page 1 This is a demo child page\npage 1-1 This is a demo child page\npage 1-1-2 This is a demo child page\npage 1-1-3 This is a demo child page\npage 2 This is a demo child page with no description. So its content is used as description.\npage 3 This is a demo child page\npage 3-1 This is a plain page test nested in a parent\n {{% children containerstyle=\"div\" style=\"div\" depth=\"999\" %}}  page X page 1 page 1-1 page 1-1-2 page 1-1-2-1 page 1-1-2-2 page 1-1-3 page 2 page 3 page 3-1  ",
    "description": "List the child pages of a page",
    "tags": null,
    "title": "Children",
    "uri": "/shortcodes/children/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "children",
    "uri": "/tags/children/"
  },
  {
    "content": "Contributors Special thanks to everyone who has contributed to this project.\nMany thanks to @matcornic for his work on the Learn theme.\nPackages and libraries  Mermaid - generation of diagram and flowchart from text in a similar manner as Markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library jquery-svg-zoom-pan - enable pan and zoom in Mermaid graphs lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services… clipboard.js - copy text to clipboard modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don’t support  Tooling  gren - Releasenotes generator Hugo - Static site generator Netlify - Continuous deployement and hosting of this documentation Wercker - Continous testing  ",
    "description": "",
    "tags": null,
    "title": "Credits",
    "uri": "/credits/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "documentation",
    "uri": "/tags/documentation/"
  },
  {
    "content": "The Expand shortcode displays an expandable/collapsible section of text on your page.\nUsage {{% expand [ \u003cstring\u003e [ \"true\" | \"false\" ] ] %}} Yes! {{% /expand %}} The first optional parameter defines the text that appears next to the expand/collapse icon. The default text is \"Expand me...\".\nThe second optional parameter controls if the block is initially shown as expanded (\"true\") or collapsed (\"false\"). The default ist \"false\".\nExamples   I'll tell you a secret...  …maybe the next time you’ll open this expander!\n  All defaults   Expand me...  Yes, you did it!\n    Show markup  {{% expand %}} Yes, you did it! {{% /expand %}}    Initially expanded   Expand me...  No need to press you!\n    Show markup  {{% expand \"Expand me...\" \"true\" %}} No need to press you! {{% /expand %}}    Arbitrary text   Show me endless possibilities  Some expandable text.\nYou can add:\n multiple paragraphs bullet point lists emphasized, bold and even bold emphasized text links other shortcodes besides expand etc.  ...and even source code  the possiblities are endless\n     Show markup  {{% expand \"Show me endless possibilities\" %}} Some expandable text. You can add: - multiple paragraphs - bullet point lists - _emphasized_, **bold** and even **_bold emphasized_** text - [links](https://example.com) - other shortcodes besides `expand` - etc. ```plaintext ...and even source code ``` \u003e the possiblities are endless {{% /expand %}}    ",
    "description": "Displays an expandable/collapsible section of text on your page",
    "tags": null,
    "title": "Expand",
    "uri": "/shortcodes/expand/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "hidden",
    "uri": "/tags/hidden/"
  },
  {
    "content": "The include shortcode includes other files from your project inside of the current file. This can even contain Markdown and will be taken into account when generating the table of contents.\nUsage {{% include \u003cstring\u003e [ \"true\" | \"false\" ] %}} The first required parameter is the path to the file to be included.\nIf the file’s content will be displayed as HTML, the second optional parameter controls if the first heading of the included file should be displayed (\"true\")- which is the default - or be hidden.\nExamples Arbitray content You can add:\n multiple paragraphs bullet point lists emphasized, bold and even bold emphasized text links other shortcodes besides include etc.  ...and even source code  the possiblities are endless\n   Show markup  {{% include \"shortcodes/INCLUDE_ME.md\" %}}    ",
    "description": "Displays content from other Markdown files",
    "tags": null,
    "title": "Include",
    "uri": "/shortcodes/include/"
  },
  {
    "content": "Mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown.\nUsage Just insert your Mermaid code in the mermaid shortcode like this:\n{{\u003c mermaid [ align=(\"left\"|\"right\"|\"center\"|\"justify\") ] \u003e}} classDiagram Person *-- Dog {{\u003c /mermaid \u003e}} You can set an optional align attribute which defaults to \"center\".\nIf you don’t need alignment you can use the alternative syntax using code fences if you have turned off guessSyntax for the markup.highlight setting (see below):\n```mermaid classDiagram Person *-- Dog ``` The generated graphs can be be panned by dragging them and zoomed by using the mousewheel. On mobile devices you can use finger gestures.\nExamples Flowchart graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two]    Show markup  {{\u003c mermaid align=\"left\" \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{\u003cstrong\u003eDecision\u003c/strong\u003e} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}}    Sequence sequenceDiagram participant Alice participant Bob Alice-John: Hello John, how are you? loop Healthcheck John-John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John--Alice: Great! John-Bob: How about you? Bob--John: Jolly good!    Show markup  {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}}    GANTT gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to Mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to Mermaid :1d    Show markup  {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to Mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to Mermaid :1d {{\u003c /mermaid \u003e}}    Class classDiagram Class01 C2 : Where am i? Class09 --* C3 Class09 --| Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08  C2: Cool label    Show markup  {{\u003c mermaid \u003e}} classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label {{\u003c /mermaid \u003e}}    State stateDiagram-v2 open: Open Door closed: Closed Door locked: Locked Door open --\u003e closed: Close closed --\u003e locked: Lock locked --\u003e closed: Unlock closed --\u003e open: Open    Show markup  ```mermaid stateDiagram-v2 open: Open Door closed: Closed Door locked: Locked Door open --\u003e closed: Close closed --\u003e locked: Lock locked --\u003e closed: Unlock closed --\u003e open: Open ```    Configuration Mermaid is configured with default settings. You can customize Mermaid’s default settings for all of your files thru a JSON object in your config.toml or override these settings sidewise thru your pages frontmatter.\nThis JSON object is forwarded into Mermaid’s mermaid.initialize() function.\nSee Mermaid documentation for all allowed settings.\nAlso, if you want to use mermaid codefences, you have to turn off guessSyntax for the markup.highlight setting.\nExample [params] mermaidInitialize = \"{ \\\"theme\\\": \\\"dark\\\" }\" [markup] [markup.highlight] guessSyntax = false # if set to true, avoid unstyled code if no language was given but mermaid code fences will not work anymore or pages frontmatter\n+++ mermaidInitialize = \"{ \\\"theme\\\": \\\"dark\\\" }\" +++ ",
    "description": "Generation of diagram and flowchart from text in a similar manner as Markdown",
    "tags": null,
    "title": "Mermaid",
    "uri": "/shortcodes/mermaid/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "non-hidden",
    "uri": "/tags/non-hidden/"
  },
  {
    "content": "The notice shortcode shows four types of disclaimers to help you structure your page.\nUsage {{% notice ( note | info | tip | warning ) [ \u003cstring\u003e ] %}} Some markup {{% /notice %}} The first parameter is required and indicates the type of notice.\nThe second parameter is optional. If provided, it will be used as the title of the notice. If not provided, then the type of notice will be used as the title. For example, the title of a warning notice will be “Warning”.\nExamples Note NoteA notice disclaimer\nYou can add:\n multiple paragraphs bullet point lists emphasized, bold and even bold emphasized text links other shortcodes besides notice etc.  ...and even source code  the possiblities are endless\n    Show markup  {{% notice note %}} A **notice** disclaimer You can add: - multiple paragraphs - bullet point lists - _emphasized_, **bold** and even ***bold emphasized*** text - [links](https://example.com) - other shortcodes besides `notice` - etc. ```plaintext ...and even source code ``` \u003e the possiblities are endless {{% /notice %}}    Info InfoAn information disclaimer\nYou can add:\n multiple paragraphs bullet point lists emphasized, bold and even bold emphasized text links other shortcodes besides notice etc.  ...and even source code  the possiblities are endless\n    Show markup  {{% notice info %}} An **information** disclaimer You can add: - multiple paragraphs - bullet point lists - _emphasized_, **bold** and even ***bold emphasized*** text - [links](https://example.com) - other shortcodes besides `notice` - etc. ```plaintext ...and even source code ``` \u003e the possiblities are endless {{% /notice %}}    Tip TipA tip disclaimer\nYou can add:\n multiple paragraphs bullet point lists emphasized, bold and even bold emphasized text links other shortcodes besides notice etc.  ...and even source code  the possiblities are endless\n    Show markup  {{% notice tip %}} A **tip** disclaimer You can add: - multiple paragraphs - bullet point lists - _emphasized_, **bold** and even ***bold emphasized*** text - [links](https://example.com) - other shortcodes besides `notice` - etc. ```plaintext ...and even source code ``` \u003e the possiblities are endless {{% /notice %}}    Warning WarningA warning disclaimer\nYou can add:\n multiple paragraphs bullet point lists emphasized, bold and even bold emphasized text links other shortcodes besides notice etc.  ...and even source code  the possiblities are endless\n    Show markup  {{% notice warning %}} A **warning** disclaimer You can add: - multiple paragraphs - bullet point lists - _emphasized_, **bold** and even ***bold emphasized*** text - [links](https://example.com) - other shortcodes besides `notice` - etc. ```plaintext ...and even source code ``` \u003e the possiblities are endless {{% /notice %}}    Notice with Custom Title You can customize the title of the notice by passing it as a second parameter.\nPay Attention to this Note!The title is now the parameter that was provided.\n   Show markup  {{% notice note \"Pay Attention to this Note!\" %}} The title is now the parameter that was provided. {{% /notice %}}    ",
    "description": "Disclaimers to help you structure your page",
    "tags": null,
    "title": "Notice",
    "uri": "/shortcodes/notice/"
  },
  {
    "content": "This is a demo child page with a hidden child. You can still access the hidden child directly or via the search.\nSubpages of this page page 1-1-1 (hidden) page 1-1-2 page 1-1-3  ",
    "description": "This is a demo child page",
    "tags": [
      "children",
      "non-hidden"
    ],
    "title": "page 1-1",
    "uri": "/shortcodes/children/children-1/children-1-1/"
  },
  {
    "content": "This is a hidden demo child page. This page and all its children are hidden in the menu, arrow navigation and children shortcode as long as you aren’t viewing this page or its children directly.\nSubpages of this page page 1-1-1-1  ",
    "description": "This is a hidden demo child page",
    "tags": [
      "children",
      "hidden"
    ],
    "title": "page 1-1-1 (hidden)",
    "uri": "/shortcodes/children/children-1/children-1-1/children-1-1-1/"
  },
  {
    "content": "This is a non-hidden demo child page of a hidden parent page with a hidden child. You can still access the hidden child directly or via the search.\nSubpages of this page page 1-1-1-1-1 (hidden)  ",
    "description": "This is a non-hidden demo child page of a hidden parent page",
    "tags": [
      "children",
      "hidden"
    ],
    "title": "page 1-1-1-1",
    "uri": "/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/"
  },
  {
    "content": "This is a hidden demo child page. This page and all its children are hidden in the menu, arrow navigation and children shortcode as long as you aren’t viewing this page or its children directly.\nSubpages of this page page 1-1-1-1-1-1  ",
    "description": "This is a hidden demo child page",
    "tags": [
      "children",
      "hidden"
    ],
    "title": "page 1-1-1-1-1 (hidden)",
    "uri": "/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/children-1-1-1-1-1/"
  },
  {
    "content": "This is a non-hidden demo child page of a hidden parent page.\n",
    "description": "This is a non-hidden demo child page of a hidden parent page",
    "tags": [
      "children",
      "hidden"
    ],
    "title": "page 1-1-1-1-1-1",
    "uri": "/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/children-1-1-1-1-1/children-1-1-1-1-1-1/"
  },
  {
    "content": "This is a plain demo child page.\nSubpages of this page page 1-1-2-1 page 1-1-2-2  ",
    "description": "This is a demo child page",
    "tags": [
      "children",
      "non-hidden"
    ],
    "title": "page 1-1-2",
    "uri": "/shortcodes/children/children-1/children-1-1/children-1-1-2/"
  },
  {
    "content": "This is a plain demo child page.\n",
    "description": "This is a demo child page",
    "tags": [
      "children",
      "non-hidden"
    ],
    "title": "page 1-1-2-1",
    "uri": "/shortcodes/children/children-1/children-1-1/children-1-1-2/children-1-1-2-1/"
  },
  {
    "content": "This is a plain demo child page.\n",
    "description": "This is a demo child page",
    "tags": [
      "children",
      "non-hidden"
    ],
    "title": "page 1-1-2-2",
    "uri": "/shortcodes/children/children-1/children-1-1/children-1-1-2/children-1-1-2-2/"
  },
  {
    "content": "This is a plain demo child page.\n",
    "description": "This is a demo child page",
    "tags": [
      "children",
      "non-hidden"
    ],
    "title": "page 1-1-3",
    "uri": "/shortcodes/children/children-1/children-1-1/children-1-1-3/"
  },
  {
    "content": "This is a plain demo child page.\n",
    "description": "This is a plain page test nested in a parent",
    "tags": [
      "children",
      "non-hidden"
    ],
    "title": "page 3-1",
    "uri": "/shortcodes/children/children-3/test3/"
  },
  {
    "content": "Hugo Relearn Theme The Relearn theme is a theme for Hugo, a static website generator written in Go. Where Hugo is often used for blogs, this theme is designed with documentation in mind.\nInfoThe theme is a fork of the great Learn theme with the aim of fixing long outstanding bugs and adepting to latest Hugo features. As far as possible this theme tries to be a drop-in replacement for the Learn theme.\n Main features TipSee what’s new within the latest update.\n  Automatic Search Multilingual mode Unlimited menu levels Automatic next/prev buttons to navigate through menu entries Image resizing, shadow… Attachments files List child pages Mermaid diagram (flowchart, sequence, gantt) Customizable look and feel and theme variants Buttons Tip/Note/Info/Warning boxes Expand Tabs File inclusion  Getting support To get support, feel free to open a new discussion topic or issue in the official repository on GitHub.\nBecome a contributor Feel free to update this documentation by just clicking the Edit this page link displayed on top right of each page. Your changes will be deployed automatically once they were reviewed.\nYou are most welcome to contribute bugfixes or even new features to the source code by making pull requests to the official repository via GitHub. Please visit the contribution guidelines first.\nLicense This theme is licensed under the MIT License.\nCredits This theme would not be possible without the work of many others. See the credits for a detailed list.\n",
    "description": "",
    "tags": null,
    "title": "Relearn Theme for Hugo",
    "uri": "/"
  },
  {
    "content": "BITS by Dr. Lutz Gollan ",
    "description": "",
    "tags": null,
    "title": "Showcase",
    "uri": "/showcase/"
  },
  {
    "content": "The siteparam shortcode is used to help you print values of site params.\nUsage {{% siteparam \u003cstring\u003e %}} The first required parameter is the name of the site param to be displayed.\nExamples For instance, in this current site, the editURL variable is used in config.toml\n[params] editURL = \"https://github.com/McShelby/hugo-theme-relearn/edit/main/exampleSite/content/\" Use the siteparam shortcode to display its value.\n`editURL` Value : {{% siteparam \"editURL\" %}} is displayed as\neditURL Value : https://github.com/McShelby/hugo-theme-relearn/edit/main/exampleSite/content/\n",
    "description": "Get value of site params variables in your page",
    "tags": null,
    "title": "Site param",
    "uri": "/shortcodes/siteparam/"
  },
  {
    "content": "Choose which content to see across the page. Very handy for providing code snippets for multiple languages or providing configuration in different formats.\nCode example {{\u003c tabs \u003e}} {{% tab name=\"python\" %}} ```python print(\"Hello World!\") ``` {{% /tab %}} {{% tab name=\"R\" %}} ```R \u003e print(\"Hello World!\") ``` {{% /tab %}} {{% tab name=\"Bash\" %}} ```Bash echo \"Hello World!\" ``` {{% /tab %}} {{\u003c /tabs \u003e}} Renders as:\npython R Bash  print(\"Hello World!\")   \u003e print(\"Hello World!\")   echo \"Hello World!\"     Tab views with the same tabs that belong to the same group sychronize their selection:\npython R Bash  print(\"Hello World!\")   \u003e print(\"Hello World!\")   echo \"Hello World!\"     Config example {{\u003c tabs groupId=\"config\" \u003e}} {{% tab name=\"json\" %}} ```json { \"Hello\": \"World\" } ``` {{% /tab %}} {{% tab name=\"XML\" %}} ```xml \u003cHello\u003eWorld\u003c/Hello\u003e ``` {{% /tab %}} {{% tab name=\"properties\" %}} ```properties Hello = World ``` {{% /tab %}} {{\u003c /tabs \u003e}} Renders as:\njson XML properties  { \"Hello\": \"World\" }   \u003cHello\u003eWorld\u003c/Hello\u003e   Hello = World     WarningWhen using tab views with different content sets, make sure to use a common groupId for equal sets but distinct groupId for different sets. The groupId defaults to 'default'. Take this into account across the whole site! The tab selection is restored automatically based on the groupId and if it cannot find a tab item because it came from the 'default' group on a different page then all tabs will be empty at first.\n ",
    "description": "Synchronize selection of content in different tabbed views",
    "tags": null,
    "title": "Tabbed views",
    "uri": "/shortcodes/tabs/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/"
  },
  {
    "content": "Placeholder…\n",
    "description": "",
    "tags": null,
    "title": "The one and only hidden child",
    "uri": "/yours/children-1/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "tutorial",
    "uri": "/tags/tutorial/"
  }
]
